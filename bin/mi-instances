#!/usr/bin/python
# vim: sw=2 ts=2

import argparse
import json
import operator
import shlex
import subprocess
import sys
import logging 
logger = logging.getLogger(__name__)
logging.basicConfig()

class Instance(object):
  def __init__(self, json):
    self.json = json
    self._tags = {}

  @property
  def tags(self):
    if not self._tags:
      for t in self.json.get('Tags'):
        self._tags[t['Key']] = t['Value']
    return self._tags

  @property
  def name(self):
    return self.tags.get('Name')

  @property
  def mi_type(self):
    return self.tags.get('Instance Type','Not set')

  @property
  def dns_name(self):
    return self.json.get('PublicDnsName','#Not set')

  @property
  def state(self):
    return self.json.get('State',{}).get('Name')

class App(object):
  __instances__ = {}

  def __init__(self,opts):
    self.opts=opts

  def call_aws(self,cmd,profile=None,run_anyway=False):
    if not cmd.startswith('/usr'):
      cmd = '/usr/local/bin/' + cmd
    logger.debug('Calling: %s' % cmd)
    cmd += ' --output json'
    if profile:
      cmd += ' --profile ' + profile
    cmd = shlex.split(cmd)
    if not self.opts.dry_run or run_anyway:
      p = subprocess.Popen(cmd, stderr=subprocess.PIPE,stdout=subprocess.PIPE)
      (o,e) = p.communicate()
      if p.returncode != 0:
        if e.find('The config profile') >= 0:
          raise RuntimeError("Please set up the 'default' profile in your ~/.aws/credentials file.")
        raise RuntimeError("Error running aws cli: %s" % e)
      ret = json.loads(o)
      return ret
    else:
      return {}

  @property
  def raw_instances(self):
    if not self.__instances__:
       for instance_json, in self.call_aws("aws ec2 describe-instances --query 'Reservations[*].Instances[*]'", run_anyway=True):
         i = Instance(instance_json)
         self.__instances__[i.name] = i
    return self.__instances__

  def get_instances(self, i_type = None):
    if i_type:
      out = []
      for x in self.raw_instances.values():
        if x.mi_type.lower() in [ t.lower() for t in i_type ]:
          out.append(x)
      return sorted(out, key=operator.attrgetter('mi_type','name'))
    else:
      return self.raw_instances.values()

def main():
  p = argparse.ArgumentParser()
  p.add_argument('type', help='Type of instance to display', nargs='*', default=None)
  p.add_argument('--verbose','-v', help='be verbose', action='store_true')
  p.add_argument('--dry-run','-n', help='dry run', action='store_true')
  p.add_argument('--dsh','-d', action='store_true', help='output for dsh group')
  opts = p.parse_args()
  a = App(opts)
  logger.setLevel(logging.INFO)
  if opts.verbose:
    logger.setLevel(logging.DEBUG)
  for i in a.get_instances(opts.type):
    if i.state == 'running':
      if opts.dsh:
        print '# %s %s\n%s' % (i.mi_type, i.name, i.dns_name)
      else:
        print "%s\t%s\t%s" % ( i.name, i.dns_name, i.mi_type )
  return 0

if __name__ == '__main__':
  sys.exit(main())
